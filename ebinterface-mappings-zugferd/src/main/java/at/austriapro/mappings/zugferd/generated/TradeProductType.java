//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.09.05 at 03:52:26 PM CEST 
//


package at.austriapro.mappings.zugferd.generated;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TradeProductType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="TradeProductType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="GlobalID" type="{urn:un:unece:uncefact:data:standard:UnqualifiedDataType:15}IDType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="SellerAssignedID" type="{urn:un:unece:uncefact:data:standard:UnqualifiedDataType:15}IDType"
 * minOccurs="0"/>
 *         &lt;element name="BuyerAssignedID" type="{urn:un:unece:uncefact:data:standard:UnqualifiedDataType:15}IDType"
 * minOccurs="0"/>
 *         &lt;element name="Name" type="{urn:un:unece:uncefact:data:standard:UnqualifiedDataType:15}TextType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Description" type="{urn:un:unece:uncefact:data:standard:UnqualifiedDataType:15}TextType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ApplicableProductCharacteristic" type="{urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:12}ProductCharacteristicType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="DesignatedProductClassification" type="{urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:12}ProductClassificationType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="OriginTradeCountry" type="{urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:12}TradeCountryType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="IncludedReferencedProduct" type="{urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:12}ReferencedProductType"
 * maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TradeProductType", propOrder = {
    "globalID",
    "sellerAssignedID",
    "buyerAssignedID",
    "name",
    "description",
    "applicableProductCharacteristic",
    "designatedProductClassification",
    "originTradeCountry",
    "includedReferencedProduct"
})
public class TradeProductType {

  @XmlElement(name = "GlobalID")
  protected List<IDType> globalID;
  @XmlElement(name = "SellerAssignedID")
  protected IDType sellerAssignedID;
  @XmlElement(name = "BuyerAssignedID")
  protected IDType buyerAssignedID;
  @XmlElement(name = "Name")
  protected List<TextType> name;
  @XmlElement(name = "Description")
  protected List<TextType> description;
  @XmlElement(name = "ApplicableProductCharacteristic")
  protected List<ProductCharacteristicType> applicableProductCharacteristic;
  @XmlElement(name = "DesignatedProductClassification")
  protected List<ProductClassificationType> designatedProductClassification;
  @XmlElement(name = "OriginTradeCountry")
  protected List<TradeCountryType> originTradeCountry;
  @XmlElement(name = "IncludedReferencedProduct")
  protected List<ReferencedProductType> includedReferencedProduct;

  /**
   * Gets the value of the globalID property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the globalID property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getGlobalID().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link IDType }
   */
  public List<IDType> getGlobalID() {
    if (globalID == null) {
      globalID = new ArrayList<IDType>();
    }
    return this.globalID;
  }

  /**
   * Gets the value of the sellerAssignedID property.
   *
   * @return possible object is {@link IDType }
   */
  public IDType getSellerAssignedID() {
    return sellerAssignedID;
  }

  /**
   * Sets the value of the sellerAssignedID property.
   *
   * @param value allowed object is {@link IDType }
   */
  public void setSellerAssignedID(IDType value) {
    this.sellerAssignedID = value;
  }

  /**
   * Gets the value of the buyerAssignedID property.
   *
   * @return possible object is {@link IDType }
   */
  public IDType getBuyerAssignedID() {
    return buyerAssignedID;
  }

  /**
   * Sets the value of the buyerAssignedID property.
   *
   * @param value allowed object is {@link IDType }
   */
  public void setBuyerAssignedID(IDType value) {
    this.buyerAssignedID = value;
  }

  /**
   * Gets the value of the name property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the name property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getName().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link TextType }
   */
  public List<TextType> getName() {
    if (name == null) {
      name = new ArrayList<TextType>();
    }
    return this.name;
  }

  /**
   * Gets the value of the description property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the description property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getDescription().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link TextType }
   */
  public List<TextType> getDescription() {
    if (description == null) {
      description = new ArrayList<TextType>();
    }
    return this.description;
  }

  /**
   * Gets the value of the applicableProductCharacteristic property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the applicableProductCharacteristic property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getApplicableProductCharacteristic().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link ProductCharacteristicType
   * }
   */
  public List<ProductCharacteristicType> getApplicableProductCharacteristic() {
    if (applicableProductCharacteristic == null) {
      applicableProductCharacteristic = new ArrayList<ProductCharacteristicType>();
    }
    return this.applicableProductCharacteristic;
  }

  /**
   * Gets the value of the designatedProductClassification property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the designatedProductClassification property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getDesignatedProductClassification().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link ProductClassificationType
   * }
   */
  public List<ProductClassificationType> getDesignatedProductClassification() {
    if (designatedProductClassification == null) {
      designatedProductClassification = new ArrayList<ProductClassificationType>();
    }
    return this.designatedProductClassification;
  }

  /**
   * Gets the value of the originTradeCountry property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the originTradeCountry property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getOriginTradeCountry().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link TradeCountryType }
   */
  public List<TradeCountryType> getOriginTradeCountry() {
    if (originTradeCountry == null) {
      originTradeCountry = new ArrayList<TradeCountryType>();
    }
    return this.originTradeCountry;
  }

  /**
   * Gets the value of the includedReferencedProduct property.
   *
   * <p> This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the includedReferencedProduct property.
   *
   * <p> For example, to add a new item, do as follows:
   * <pre>
   *    getIncludedReferencedProduct().add(newItem);
   * </pre>
   *
   *
   * <p> Objects of the following type(s) are allowed in the list {@link ReferencedProductType }
   */
  public List<ReferencedProductType> getIncludedReferencedProduct() {
    if (includedReferencedProduct == null) {
      includedReferencedProduct = new ArrayList<ReferencedProductType>();
    }
    return this.includedReferencedProduct;
  }

  public TradeProductType withGlobalID(IDType... values) {
    if (values != null) {
      for (IDType value : values) {
        getGlobalID().add(value);
      }
    }
    return this;
  }

  public TradeProductType withGlobalID(Collection<IDType> values) {
    if (values != null) {
      getGlobalID().addAll(values);
    }
    return this;
  }

  public TradeProductType withSellerAssignedID(IDType value) {
    setSellerAssignedID(value);
    return this;
  }

  public TradeProductType withBuyerAssignedID(IDType value) {
    setBuyerAssignedID(value);
    return this;
  }

  public TradeProductType withName(TextType... values) {
    if (values != null) {
      for (TextType value : values) {
        getName().add(value);
      }
    }
    return this;
  }

  public TradeProductType withName(Collection<TextType> values) {
    if (values != null) {
      getName().addAll(values);
    }
    return this;
  }

  public TradeProductType withDescription(TextType... values) {
    if (values != null) {
      for (TextType value : values) {
        getDescription().add(value);
      }
    }
    return this;
  }

  public TradeProductType withDescription(Collection<TextType> values) {
    if (values != null) {
      getDescription().addAll(values);
    }
    return this;
  }

  public TradeProductType withApplicableProductCharacteristic(ProductCharacteristicType... values) {
    if (values != null) {
      for (ProductCharacteristicType value : values) {
        getApplicableProductCharacteristic().add(value);
      }
    }
    return this;
  }

  public TradeProductType withApplicableProductCharacteristic(
      Collection<ProductCharacteristicType> values) {
    if (values != null) {
      getApplicableProductCharacteristic().addAll(values);
    }
    return this;
  }

  public TradeProductType withDesignatedProductClassification(ProductClassificationType... values) {
    if (values != null) {
      for (ProductClassificationType value : values) {
        getDesignatedProductClassification().add(value);
      }
    }
    return this;
  }

  public TradeProductType withDesignatedProductClassification(
      Collection<ProductClassificationType> values) {
    if (values != null) {
      getDesignatedProductClassification().addAll(values);
    }
    return this;
  }

  public TradeProductType withOriginTradeCountry(TradeCountryType... values) {
    if (values != null) {
      for (TradeCountryType value : values) {
        getOriginTradeCountry().add(value);
      }
    }
    return this;
  }

  public TradeProductType withOriginTradeCountry(Collection<TradeCountryType> values) {
    if (values != null) {
      getOriginTradeCountry().addAll(values);
    }
    return this;
  }

  public TradeProductType withIncludedReferencedProduct(ReferencedProductType... values) {
    if (values != null) {
      for (ReferencedProductType value : values) {
        getIncludedReferencedProduct().add(value);
      }
    }
    return this;
  }

  public TradeProductType withIncludedReferencedProduct(Collection<ReferencedProductType> values) {
    if (values != null) {
      getIncludedReferencedProduct().addAll(values);
    }
    return this;
  }

}
